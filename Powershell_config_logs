Windows PowerShell                                                                                                      Copyright (C) Microsoft Corporation. All rights reserved.                                                                                                                                                                                       Try the new cross-platform PowerShell https://aka.ms/pscore6                                                                                                                                                                                    PS C:\Users\Administrator> #Requires -Version 3.0                                                                       An error occurred while creating the pipeline.                                                                              + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException                                      + FullyQualifiedErrorId : RuntimeException                                                                                                                                                                                                  PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Configure a Windows host for remote management with Ansible                                PS C:\Users\Administrator> # -----------------------------------------------------------                                PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # This script checks the current WinRM (PS Remoting) configuration and makes                 PS C:\Users\Administrator> # the necessary changes to allow Ansible to connect, authenticate and                        PS C:\Users\Administrator> # execute PowerShell commands.                                                               PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # All events are logged to the Windows EventLog, useful for unattended runs.                 PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -Verbose in order to see the verbose output messages.                           PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -CertValidityDays to specify how long this certificate is valid                 PS C:\Users\Administrator> # starting from today. So you would specify -CertValidityDays 3650 to get                    PS C:\Users\Administrator> # a 10-year valid certificate.                                                               PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -ForceNewSSLCert if the system has been SysPreped and a new                     PS C:\Users\Administrator> # SSL Certifcate must be forced on the WinRM Listener when re-running this                   PS C:\Users\Administrator> # script. This is necessary when a new SID and CN name is created.                           PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -SkipNetworkProfileCheck to skip the network profile check.                     PS C:\Users\Administrator> # Without specifying this the script will only run if the device's interfaces                PS C:\Users\Administrator> # are in DOMAIN or PRIVATE zones.  Provide this switch if you want to enable                 PS C:\Users\Administrator> # WinRM on a device with an interface in PUBLIC zone.                                        PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -SubjectName to specify the CN name of the certificate. This                    PS C:\Users\Administrator> # defaults to the system's hostname and generally should not be specified.                   PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Written by Trond Hindenes <trond@hindenes.com>                                             PS C:\Users\Administrator> # Updated by Chris Church <cchurch@ansible.com>                                              PS C:\Users\Administrator> # Updated by Michael Crilly <mike@autologic.cm>                                              PS C:\Users\Administrator> # Updated by Anton Ouzounov <Anton.Ouzounov@careerbuilder.com>                               PS C:\Users\Administrator> # Updated by Nicolas Simond <contact@nicolas-simond.com>                                     PS C:\Users\Administrator> # Updated by Dag WieÃ«rs <dag@wieers.com>                                                     PS C:\Users\Administrator> # Updated by Jordan Borean <jborean93@gmail.com>                                             PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Version 1.0 - 2014-07-06                                                                   PS C:\Users\Administrator> # Version 1.1 - 2014-11-11                                                                   PS C:\Users\Administrator> # Version 1.2 - 2015-05-15                                                                   PS C:\Users\Administrator> # Version 1.3 - 2016-04-04                                                                   PS C:\Users\Administrator> # Version 1.4 - 2017-01-05                                                                   PS C:\Users\Administrator> # Version 1.5 - 2017-02-09                                                                   PS C:\Users\Administrator> # Version 1.6 - 2017-04-18                                                                   PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Support -Verbose option                                                                    PS C:\Users\Administrator> [CmdletBinding()]                                                                            >>                                                                                                                      At line:1 char:1                                                                                                        + [CmdletBinding()]                                                                                                     + ~~~~~~~~~~~~~~~~~                                                                                                     Unexpected attribute 'CmdletBinding'.                                                                                       + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException                                       + FullyQualifiedErrorId : UnexpectedAttribute                                                                                                                                                                                               PS C:\Users\Administrator> Param (                                                                                      >>     [string]$SubjectName = $env:COMPUTERNAME,                                                                        >>     [int]$CertValidityDays = 1095,                                                                                   >>     [switch]$SkipNetworkProfileCheck,                                                                                >>     $CreateSelfSignedCert = $true,                                                                                   >>     [switch]$ForceNewSSLCert,                                                                                        >>     [switch]$EnableCredSSP                                                                                           >> )                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-Log                                                                           >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-EventLog -LogName Application -Source $EventSource -EntryType Information -EventId 1 -Message $Message     >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-VerboseLog                                                                    >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-Verbose $Message                                                                                           >>     Write-Log $Message                                                                                               >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-HostLog                                                                       >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-Host $Message                                                                                              >>     Write-Log $Message                                                                                               >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function New-LegacySelfSignedCert                                                            >> {                                                                                                                    >>     Param (                                                                                                          >>         [string]$SubjectName,                                                                                        >>         [int]$ValidDays = 1095                                                                                       >>     )                                                                                                                >>                                                                                                                      >>     $name = New-Object -COM "X509Enrollment.CX500DistinguishedName.1"                                                >>     $name.Encode("CN=$SubjectName", 0)                                                                               >>                                                                                                                      >>     $key = New-Object -COM "X509Enrollment.CX509PrivateKey.1"                                                        >>     $key.ProviderName = "Microsoft RSA SChannel Cryptographic Provider"                                              >>     $key.KeySpec = 1                                                                                                 >>     $key.Length = 4096                                                                                               >>     $key.SecurityDescriptor = "D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)"                    >>     $key.MachineContext = 1                                                                                          >>     $key.Create()                                                                                                    >>                                                                                                                      >>     $serverauthoid = New-Object -COM "X509Enrollment.CObjectId.1"                                                    >>     $serverauthoid.InitializeFromValue("1.3.6.1.5.5.7.3.1")                                                          >>     $ekuoids = New-Object -COM "X509Enrollment.CObjectIds.1"                                                         >>     $ekuoids.Add($serverauthoid)                                                                                     >>     $ekuext = New-Object -COM "X509Enrollment.CX509ExtensionEnhancedKeyUsage.1"                                      >>     $ekuext.InitializeEncode($ekuoids)                                                                               >>                                                                                                                      >>     $cert = New-Object -COM "X509Enrollment.CX509CertificateRequestCertificate.1"                                    >>     $cert.InitializeFromPrivateKey(2, $key, "")                                                                      >>     $cert.Subject = $name                                                                                            >>     $cert.Issuer = $cert.Subject                                                                                     >>     $cert.NotBefore = (Get-Date).AddDays(-1)                                                                         >>     $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)                                                             >>     $cert.X509Extensions.Add($ekuext)                                                                                >>     $cert.Encode()                                                                                                   >>                                                                                                                      >>     $enrollment = New-Object -COM "X509Enrollment.CX509Enrollment.1"                                                 >>     $enrollment.InitializeFromRequest($cert)                                                                         >>     $certdata = $enrollment.CreateRequest(0)                                                                         >>     $enrollment.InstallResponse(2, $certdata, 0, "")                                                                 >>                                                                                                                      >>     # extract/return the thumbprint from the generated cert                                                          >>     $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2                         >>     $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))                                            >>                                                                                                                      >>     return $parsed_cert.Thumbprint                                                                                   >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Setup error handling.                                                                      PS C:\Users\Administrator> Trap                                                                                         >> {                                                                                                                    >>     $_                                                                                                               >>     Exit 1                                                                                                           >> }                                                                                                                    PS C:\Users\Administrator> $ErrorActionPreference = "Stop"                                                              PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Get the ID and security principal of the current user account                              PS C:\Users\Administrator> $myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()                       PS C:\Users\Administrator> $myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)      PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Get the security principal for the Administrator role                                      PS C:\Users\Administrator> $adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator                     PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Check to see if we are currently running "as Administrator"                                PS C:\Users\Administrator> if (-Not $myWindowsPrincipal.IsInRole($adminRole))                                           >> {                                                                                                                    >>     Write-Host "ERROR: You need elevated Administrator privileges in order to run this script."                      >>     Write-Host "       Start Windows PowerShell by using the Run as Administrator option."                           >>     Exit 2                                                                                                           >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> $EventSource = $MyInvocation.MyCommand.Name                                                  PS C:\Users\Administrator> If (-Not $EventSource)                                                                       >> {                                                                                                                    >>     $EventSource = "Powershell CLI"                                                                                  >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> If ([System.Diagnostics.EventLog]::Exists('Application') -eq $False -or [System.Diagnostics.EventLog]::SourceExists($EventSource) -eq $False)                                                                        >> {                                                                                                                    >>     New-EventLog -LogName Application -Source $EventSource                                                           >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Detect PowerShell version.                                                                 PS C:\Users\Administrator> If ($PSVersionTable.PSVersion.Major -lt 3)                                                   >> {                                                                                                                    >>     Write-Log "PowerShell version 3 or higher is required."                                                          >>     Throw "PowerShell version 3 or higher is required."                                                              >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Find and start the WinRM service.                                                          PS C:\Users\Administrator> Write-Verbose "Verifying WinRM service."                                                     PS C:\Users\Administrator> If (!(Get-Service "WinRM"))                                                                  >> {                                                                                                                    >>     Write-Log "Unable to find the WinRM service."                                                                    >>     Throw "Unable to find the WinRM service."                                                                        >> }                                                                                                                    PS C:\Users\Administrator> ElseIf ((Get-Service "WinRM").Status -ne "Running")                                          ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ((Get-Service "WinRM").Status -ne "Running")                                                                   + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Starting WinRM service."                                                                          >>     Start-Service -Name "WinRM" -ErrorAction Stop                                                                    >>     Write-Log "Started WinRM service."                                                                               >>     Write-Verbose "Setting WinRM service to start automatically on boot."                                            >>     Set-Service -Name "WinRM" -StartupType Automatic                                                                 >>     Write-Log "Set WinRM service to start automatically on boot."                                                    >>                                                                                                                      >> }                                                                                                                                                                                                                                                Write-Verbose "Starting WinRM service."                                                                                 Start-Service -Name "WinRM" -ErrorAction Stop                                                                           Write-Log "Started WinRM service."                                                                                      Write-Verbose "Setting WinRM service to start automatically on boot."                                                   Set-Service -Name "WinRM" -StartupType Automatic                                                                        Write-Log "Set WinRM service to start automatically on boot."                                                                                                                                                                                                                                                                                                       PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # WinRM should be running; check that we have a PS session config.                           PS C:\Users\Administrator> If (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\localhost\Listener)))                                                                                                                  >> {                                                                                                                    >>   If ($SkipNetworkProfileCheck) {                                                                                    >>     Write-Verbose "Enabling PS Remoting without checking Network profile."                                           >>     Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop                                              >>     Write-Log "Enabled PS Remoting without checking Network profile."                                                >>   }                                                                                                                  >>   Else {                                                                                                             >>     Write-Verbose "Enabling PS Remoting."                                                                            >>     Enable-PSRemoting -Force -ErrorAction Stop                                                                       >>     Write-Log "Enabled PS Remoting."                                                                                 >>   }                                                                                                                  >> }                                                                                                                                                                                                                                            Start WinRM Service                                                                                                     WinRM service is not started currently. Running this command will start the WinRM service.                                                                                                                                                      Do you want to continue?                                                                                                [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): y                                                                                                                                                                                      Start WinRM Service                                                                                                     WinRM service is not started currently. Running this command will start the WinRM service.                                                                                                                                                      Do you want to continue?                                                                                                [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): y                                                              Get-ChildItem : The client cannot connect to the destination specified in the request. Verify that the service on the   destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service      running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following      command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                             At line:98 char:3                                                                                                       +   Get-ChildItem 'WSMan:\localhost\Plugin\' -Force:$force | ? { $_.nam ...                                             +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                  + CategoryInfo          : NotSpecified: (:) [Get-ChildItem], InvalidOperationException                                  + FullyQualifiedErrorId : System.InvalidOperationException,Microsoft.PowerShell.Commands.GetChildItemCommand                                                                                                                                PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "PS Remoting is already enabled."                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "PS Remoting is already enabled."                                                                                                                                                                                             PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Make sure there is a SSL listener.                                                         PS C:\Users\Administrator> $listeners = Get-ChildItem WSMan:\localhost\Listener                                                                                                                                                                 Start WinRM Service                                                                                                     WinRM service is not started currently. Running this command will start the WinRM service.                                                                                                                                                      Do you want to continue?                                                                                                [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): y                                                              Get-ChildItem : Cannot find path 'localhost\Listener' because it does not exist.                                        At line:1 char:14                                                                                                       + $listeners = Get-ChildItem WSMan:\localhost\Listener                                                                  +              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                      + CategoryInfo          : ObjectNotFound: (localhost\Listener:String) [Get-ChildItem], ItemNotFoundException            + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand                                                                                                                                                    PS C:\Users\Administrator> If (!($listeners | Where {$_.Keys -like "TRANSPORT=HTTPS"}))                                 >> {                                                                                                                    >>     # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                                  >>     $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                    >>     Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                                   >>                                                                                                                      >>     # Create the hashtables of settings to be used.                                                                  >>     $valueset = @{                                                                                                   >>         Hostname = $SubjectName                                                                                      >>         CertificateThumbprint = $thumbprint                                                                          >>     }                                                                                                                >>                                                                                                                      >>     $selectorset = @{                                                                                                >>         Transport = "HTTPS"                                                                                          >>         Address = "*"                                                                                                >>     }                                                                                                                >>                                                                                                                      >>     Write-Verbose "Enabling SSL listener."                                                                           >>     New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset             >>     Write-Log "Enabled SSL listener."                                                                                >> }                                                                                                                    Self-signed SSL certificate generated; thumbprint: D26FFD641B425DBA01443F68B1297C3CC34181A1                             New-WSManInstance : The client cannot connect to the destination specified in the request. Verify that the service on   the destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service  running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following      command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                             At line:19 char:5                                                                                                       +     New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorS ...                                             +     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                     + CategoryInfo          : InvalidOperation: (:) [New-WSManInstance], InvalidOperationException                          + FullyQualifiedErrorId : WsManError,Microsoft.WSMan.Management.NewWSManInstanceCommand                                                                                                                                                     PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "SSL listener is already active."                                                                  >>                                                                                                                      >>     # Force a new SSL cert on Listener if the $ForceNewSSLCert                                                       >>     If ($ForceNewSSLCert)                                                                                            >>     {                                                                                                                >>                                                                                                                      >>         # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                              >>         $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                >>         Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                               >>                                                                                                                      >>         $valueset = @{                                                                                               >>             CertificateThumbprint = $thumbprint                                                                      >>             Hostname = $SubjectName                                                                                  >>         }                                                                                                            >>                                                                                                                      >>         # Delete the listener for SSL                                                                                >>         $selectorset = @{                                                                                            >>             Address = "*"                                                                                            >>             Transport = "HTTPS"                                                                                      >>         }                                                                                                            >>         Remove-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset                          >>                                                                                                                      >>         # Add new Listener with new SSL cert                                                                         >>         New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset         >>     }                                                                                                                >> }                                                                                                                                                                                                                                                Write-Verbose "SSL listener is already active."                                                                                                                                                                                                 # Force a new SSL cert on Listener if the $ForceNewSSLCert                                                              If ($ForceNewSSLCert)                                                                                                   {                                                                                                                                                                                                                                                   # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                                         $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                           Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                                                                                                                                                                  $valueset = @{                                                                                                              CertificateThumbprint = $thumbprint                                                                                     Hostname = $SubjectName                                                                                             }                                                                                                                                                                                                                                               # Delete the listener for SSL                                                                                           $selectorset = @{                                                                                                           Address = "*"                                                                                                           Transport = "HTTPS"                                                                                                 }                                                                                                                       Remove-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset                                                                                                                                                             # Add new Listener with new SSL cert                                                                                    New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset                }                                                                                                                                                                                                                                           PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Check for basic authentication.                                                            PS C:\Users\Administrator> $basicAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where {$_.Name -eq "Basic"}                                                                                                                                                                                                                                                Start WinRM Service                                                                                                     WinRM service is not started currently. Running this command will start the WinRM service.                                                                                                                                                      Do you want to continue?                                                                                                [Y] Yes  [N] No  [S] Suspend  [?] Help (default is "Y"): y                                                              Get-ChildItem : Cannot find path 'localhost\Service\Auth' because it does not exist.                                    At line:1 char:21                                                                                                       + ... asicAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where ...                                         +                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                         + CategoryInfo          : ObjectNotFound: (localhost\Service\Auth:String) [Get-ChildItem], ItemNotFoundException        + FullyQualifiedErrorId : PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand                                                                                                                                                    PS C:\Users\Administrator> If (($basicAuthSetting.Value) -eq $false)                                                    >> {                                                                                                                    >>     Write-Verbose "Enabling basic auth support."                                                                     >>     Set-Item -Path "WSMan:\localhost\Service\Auth\Basic" -Value $true                                                >>     Write-Log "Enabled basic auth support."                                                                          >> }                                                                                                                    PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Basic auth is already enabled."                                                                   >> }                                                                                                                                                                                                                                                Write-Verbose "Basic auth is already enabled."                                                                                                                                                                                              PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # If EnableCredSSP if set to true                                                            PS C:\Users\Administrator> If ($EnableCredSSP)                                                                          >> {                                                                                                                    >>     # Check for CredSSP authentication                                                                               >>     $credsspAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where {$_.Name -eq "CredSSP"}                >>     If (($credsspAuthSetting.Value) -eq $false)                                                                      >>     {                                                                                                                >>         Write-Verbose "Enabling CredSSP auth support."                                                               >>         Enable-WSManCredSSP -role server -Force                                                                      >>         Write-Log "Enabled CredSSP auth support."                                                                    >>     }                                                                                                                >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Configure firewall to allow WinRM HTTPS connections.                                       PS C:\Users\Administrator> $fwtest1 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS"                     PS C:\Users\Administrator> $fwtest2 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS" profile=any         PS C:\Users\Administrator> If ($fwtest1.count -lt 5)                                                                    >> {                                                                                                                    >>     Write-Verbose "Adding firewall rule to allow WinRM HTTPS."                                                       >>     netsh advfirewall firewall add rule profile=any name="Allow WinRM HTTPS" dir=in localport=5986 protocol=TCP action=allow                                                                                                                 >>     Write-Log "Added firewall rule to allow WinRM HTTPS."                                                            >> }                                                                                                                    Ok.                                                                                                                                                                                                                                             PS C:\Users\Administrator> ElseIf (($fwtest1.count -ge 5) -and ($fwtest2.count -lt 5))                                  ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf (($fwtest1.count -ge 5) -and ($fwtest2.count -lt 5))                                                           + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Updating firewall rule to allow WinRM HTTPS for any profile."                                     >>     netsh advfirewall firewall set rule name="Allow WinRM HTTPS" new profile=any                                     >>     Write-Log "Updated firewall rule to allow WinRM HTTPS for any profile."                                          >> }                                                                                                                                                                                                                                                Write-Verbose "Updating firewall rule to allow WinRM HTTPS for any profile."                                            netsh advfirewall firewall set rule name="Allow WinRM HTTPS" new profile=any                                            Write-Log "Updated firewall rule to allow WinRM HTTPS for any profile."                                                                                                                                                                     PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Firewall rule already exists to allow WinRM HTTPS."                                               >> }                                                                                                                                                                                                                                                Write-Verbose "Firewall rule already exists to allow WinRM HTTPS."                                                                                                                                                                          PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Test a remoting connection to localhost, which should work.                                PS C:\Users\Administrator> $httpResult = Invoke-Command -ComputerName "localhost" -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue                                                                       PS C:\Users\Administrator> $httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck           PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> $httpsResult = New-PSSession -UseSSL -ComputerName "localhost" -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue                                                                  PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> If ($httpResult -and $httpsResult)                                                           >> {                                                                                                                    >>     Write-Verbose "HTTP: Enabled | HTTPS: Enabled"                                                                   >> }                                                                                                                    PS C:\Users\Administrator> ElseIf ($httpsResult -and !$httpResult)                                                      ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ($httpsResult -and !$httpResult)                                                                               + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "HTTP: Disabled | HTTPS: Enabled"                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "HTTP: Disabled | HTTPS: Enabled"                                                                                                                                                                                             PS C:\Users\Administrator> ElseIf ($httpResult -and !$httpsResult)                                                      ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ($httpResult -and !$httpsResult)                                                                               + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "HTTP: Enabled | HTTPS: Disabled"                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "HTTP: Enabled | HTTPS: Disabled"                                                                                                                                                                                             PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Log "Unable to establish an HTTP or HTTPS remoting session."                                               >>     Throw "Unable to establish an HTTP or HTTPS remoting session."                                                   >> }                                                                                                                                                                                                                                                Write-Log "Unable to establish an HTTP or HTTPS remoting session."                                                      Throw "Unable to establish an HTTP or HTTPS remoting session."                                                                                                                                                                              PS C:\Users\Administrator> Write-VerboseLog "PS Remoting has been successfully configured for Ansible."                 PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> winrm get winrm/config/service                                                               WSManFault                                                                                                                  Message = The client cannot connect to the destination specified in the request. Verify that the service on the destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                                                                                                                                                                   Error number:  -2144108526 0x80338012                                                                                   The client cannot connect to the destination specified in the request. Verify that the service on the destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                                                         PS C:\Users\Administrator> winrm get winrm/config/winrs                                                                 WSManFault                                                                                                                  Message = The client cannot connect to the destination specified in the request. Verify that the service on the destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                                                                                                                                                                   Error number:  -2144108526 0x80338012                                                                                   The client cannot connect to the destination specified in the request. Verify that the service on the destination is running and is accepting requests. Consult the logs and documentation for the WS-Management service running on the destination, most commonly IIS or WinRM. If the destination is the WinRM service, run the following command on the destination to analyze and configure the WinRM service: "winrm quickconfig".                                                         PS C:\Users\Administrator> winrm quickconfig                                                                            WinRM is not set up to receive requests on this machine.                                                                The following changes must be made:                                                                                                                                                                                                             Start the WinRM service.                                                                                                Set the WinRM service type to delayed auto start.                                                                                                                                                                                               Make these changes [y/n]? y                                                                                                                                                                                                                     WinRM has been updated to receive requests.                                                                                                                                                                                                     WinRM service type changed successfully.                                                                                WinRM service started.                                                                                                  WSManFault                                                                                                                  Message                                                                                                                     ProviderFault                                                                                                               WSManFault                                                                                                                  Message = WinRM firewall exception will not work since one of the network connection types on this machine is set to Public. Change the network connection type to either Domain or Private and try again.                                                                                                                                              Error number:  -2144108183 0x80338169                                                                                   WinRM firewall exception will not work since one of the network connection types on this machine is set to Public. Change the network connection type to either Domain or Private and try again.                                                PS C:\Users\Administrator> winrm get winrm/config/service                                                               Service                                                                                                                     RootSDDL = O:NSG:BAD:P(A;;GA;;;BA)(A;;GR;;;IU)S:P(AU;FA;GA;;;WD)(AU;SA;GXGW;;;WD)                                       MaxConcurrentOperations = 4294967295                                                                                    MaxConcurrentOperationsPerUser = 1500                                                                                   EnumerationTimeoutms = 240000                                                                                           MaxConnections = 300                                                                                                    MaxPacketRetrievalTimeSeconds = 120                                                                                     AllowUnencrypted = false                                                                                                Auth                                                                                                                        Basic = false                                                                                                           Kerberos = true                                                                                                         Negotiate = true                                                                                                        Certificate = false                                                                                                     CredSSP = false                                                                                                         CbtHardeningLevel = Relaxed                                                                                         DefaultPorts                                                                                                                HTTP = 5985                                                                                                             HTTPS = 5986                                                                                                        IPv4Filter = *                                                                                                          IPv6Filter = *                                                                                                          EnableCompatibilityHttpListener = false                                                                                 EnableCompatibilityHttpsListener = false                                                                                CertificateThumbprint                                                                                                   AllowRemoteAccess = true                                                                                                                                                                                                                    PS C:\Users\Administrator> winrm get winrm/config/winrs                                                                 Winrs                                                                                                                       AllowRemoteShellAccess = true                                                                                           IdleTimeout = 7200000                                                                                                   MaxConcurrentUsers = 2147483647                                                                                         MaxShellRunTime = 2147483647                                                                                            MaxProcessesPerShell = 2147483647                                                                                       MaxMemoryPerShellMB = 2147483647                                                                                        MaxShellsPerUser = 2147483647                                                                                                                                                                                                               PS C:\Users\Administrator> winrm enumerate winrm/config/Listener                                                        Listener                                                                                                                    Address = *                                                                                                             Transport = HTTP                                                                                                        Port = 5985                                                                                                             Hostname                                                                                                                Enabled = true                                                                                                          URLPrefix = wsman                                                                                                       CertificateThumbprint                                                                                                   ListeningOn = 127.0.0.1, 192.168.29.226, ::1, 2405:201:4020:da10:3c65:9906:f443:b7a3, 2405:201:4020:da10:6010:2a29:1763:7017, fe80::dccb:fbd1:97a5:5411%4                                                                                                                                                                                                           PS C:\Users\Administrator> winrm quickconfig -transport:https                                                           WinRM service is already running on this machine.                                                                       WSManFault                                                                                                                  Message                                                                                                                     ProviderFault                                                                                                               WSManFault                                                                                                                  Message = Cannot create a WinRM listener on HTTPS because this machine does not have an appropriate certificate. To be used for SSL, a certificate must have a CN matching the hostname, be appropriate for Server Authentication, and not be expired, revoked, or self-signed.                                                                                                                                                                                                 Error number:  -2144108267 0x80338115                                                                                   Cannot create a WinRM listener on HTTPS because this machine does not have an appropriate certificate. To be used for SSL, a certificate must have a CN matching the hostname, be appropriate for Server Authentication, and not be expired, revoked, or self-signed.                                                                                                   PS C:\Users\Administrator> Write-VerboseLog "PS Remoting has been successfully configured for Ansible."^C               PS C:\Users\Administrator> #Requires -Version 3.0                                                                       An error occurred while creating the pipeline.                                                                              + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException                                      + FullyQualifiedErrorId : RuntimeException                                                                                                                                                                                                  PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Configure a Windows host for remote management with Ansible                                PS C:\Users\Administrator> # -----------------------------------------------------------                                PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # This script checks the current WinRM (PS Remoting) configuration and makes                 PS C:\Users\Administrator> # the necessary changes to allow Ansible to connect, authenticate and                        PS C:\Users\Administrator> # execute PowerShell commands.                                                               PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # All events are logged to the Windows EventLog, useful for unattended runs.                 PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -Verbose in order to see the verbose output messages.                           PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -CertValidityDays to specify how long this certificate is valid                 PS C:\Users\Administrator> # starting from today. So you would specify -CertValidityDays 3650 to get                    PS C:\Users\Administrator> # a 10-year valid certificate.                                                               PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -ForceNewSSLCert if the system has been SysPreped and a new                     PS C:\Users\Administrator> # SSL Certifcate must be forced on the WinRM Listener when re-running this                   PS C:\Users\Administrator> # script. This is necessary when a new SID and CN name is created.                           PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -SkipNetworkProfileCheck to skip the network profile check.                     PS C:\Users\Administrator> # Without specifying this the script will only run if the device's interfaces                PS C:\Users\Administrator> # are in DOMAIN or PRIVATE zones.  Provide this switch if you want to enable                 PS C:\Users\Administrator> # WinRM on a device with an interface in PUBLIC zone.                                        PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Use option -SubjectName to specify the CN name of the certificate. This                    PS C:\Users\Administrator> # defaults to the system's hostname and generally should not be specified.                   PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Written by Trond Hindenes <trond@hindenes.com>                                             PS C:\Users\Administrator> # Updated by Chris Church <cchurch@ansible.com>                                              PS C:\Users\Administrator> # Updated by Michael Crilly <mike@autologic.cm>                                              PS C:\Users\Administrator> # Updated by Anton Ouzounov <Anton.Ouzounov@careerbuilder.com>                               PS C:\Users\Administrator> # Updated by Nicolas Simond <contact@nicolas-simond.com>                                     PS C:\Users\Administrator> # Updated by Dag WieÃ«rs <dag@wieers.com>                                                     PS C:\Users\Administrator> # Updated by Jordan Borean <jborean93@gmail.com>                                             PS C:\Users\Administrator> #                                                                                            PS C:\Users\Administrator> # Version 1.0 - 2014-07-06                                                                   PS C:\Users\Administrator> # Version 1.1 - 2014-11-11                                                                   PS C:\Users\Administrator> # Version 1.2 - 2015-05-15                                                                   PS C:\Users\Administrator> # Version 1.3 - 2016-04-04                                                                   PS C:\Users\Administrator> # Version 1.4 - 2017-01-05                                                                   PS C:\Users\Administrator> # Version 1.5 - 2017-02-09                                                                   PS C:\Users\Administrator> # Version 1.6 - 2017-04-18                                                                   PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Support -Verbose option                                                                    PS C:\Users\Administrator> [CmdletBinding()]                                                                            >>                                                                                                                      At line:1 char:1                                                                                                        + [CmdletBinding()]                                                                                                     + ~~~~~~~~~~~~~~~~~                                                                                                     Unexpected attribute 'CmdletBinding'.                                                                                       + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException                                       + FullyQualifiedErrorId : UnexpectedAttribute                                                                                                                                                                                               PS C:\Users\Administrator> Param (                                                                                      >>     [string]$SubjectName = $env:COMPUTERNAME,                                                                        >>     [int]$CertValidityDays = 1095,                                                                                   >>     [switch]$SkipNetworkProfileCheck,                                                                                >>     $CreateSelfSignedCert = $true,                                                                                   >>     [switch]$ForceNewSSLCert,                                                                                        >>     [switch]$EnableCredSSP                                                                                           >> )                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-Log                                                                           >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-EventLog -LogName Application -Source $EventSource -EntryType Information -EventId 1 -Message $Message     >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-VerboseLog                                                                    >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-Verbose $Message                                                                                           >>     Write-Log $Message                                                                                               >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function Write-HostLog                                                                       >> {                                                                                                                    >>     $Message = $args[0]                                                                                              >>     Write-Host $Message                                                                                              >>     Write-Log $Message                                                                                               >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> Function New-LegacySelfSignedCert                                                            >> {                                                                                                                    >>     Param (                                                                                                          >>         [string]$SubjectName,                                                                                        >>         [int]$ValidDays = 1095                                                                                       >>     )                                                                                                                >>                                                                                                                      >>     $name = New-Object -COM "X509Enrollment.CX500DistinguishedName.1"                                                >>     $name.Encode("CN=$SubjectName", 0)                                                                               >>                                                                                                                      >>     $key = New-Object -COM "X509Enrollment.CX509PrivateKey.1"                                                        >>     $key.ProviderName = "Microsoft RSA SChannel Cryptographic Provider"                                              >>     $key.KeySpec = 1                                                                                                 >>     $key.Length = 4096                                                                                               >>     $key.SecurityDescriptor = "D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)"                    >>     $key.MachineContext = 1                                                                                          >>     $key.Create()                                                                                                    >>                                                                                                                      >>     $serverauthoid = New-Object -COM "X509Enrollment.CObjectId.1"                                                    >>     $serverauthoid.InitializeFromValue("1.3.6.1.5.5.7.3.1")                                                          >>     $ekuoids = New-Object -COM "X509Enrollment.CObjectIds.1"                                                         >>     $ekuoids.Add($serverauthoid)                                                                                     >>     $ekuext = New-Object -COM "X509Enrollment.CX509ExtensionEnhancedKeyUsage.1"                                      >>     $ekuext.InitializeEncode($ekuoids)                                                                               >>                                                                                                                      >>     $cert = New-Object -COM "X509Enrollment.CX509CertificateRequestCertificate.1"                                    >>     $cert.InitializeFromPrivateKey(2, $key, "")                                                                      >>     $cert.Subject = $name                                                                                            >>     $cert.Issuer = $cert.Subject                                                                                     >>     $cert.NotBefore = (Get-Date).AddDays(-1)                                                                         >>     $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)                                                             >>     $cert.X509Extensions.Add($ekuext)                                                                                >>     $cert.Encode()                                                                                                   >>                                                                                                                      >>     $enrollment = New-Object -COM "X509Enrollment.CX509Enrollment.1"                                                 >>     $enrollment.InitializeFromRequest($cert)                                                                         >>     $certdata = $enrollment.CreateRequest(0)                                                                         >>     $enrollment.InstallResponse(2, $certdata, 0, "")                                                                 >>                                                                                                                      >>     # extract/return the thumbprint from the generated cert                                                          >>     $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2                         >>     $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))                                            >>                                                                                                                      >>     return $parsed_cert.Thumbprint                                                                                   >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Setup error handling.                                                                      PS C:\Users\Administrator> Trap                                                                                         >> {                                                                                                                    >>     $_                                                                                                               >>     Exit 1                                                                                                           >> }                                                                                                                    PS C:\Users\Administrator> $ErrorActionPreference = "Stop"                                                              PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Get the ID and security principal of the current user account                              PS C:\Users\Administrator> $myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()                       PS C:\Users\Administrator> $myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)      PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Get the security principal for the Administrator role                                      PS C:\Users\Administrator> $adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator                     PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Check to see if we are currently running "as Administrator"                                PS C:\Users\Administrator> if (-Not $myWindowsPrincipal.IsInRole($adminRole))                                           >> {                                                                                                                    >>     Write-Host "ERROR: You need elevated Administrator privileges in order to run this script."                      >>     Write-Host "       Start Windows PowerShell by using the Run as Administrator option."                           >>     Exit 2                                                                                                           >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> $EventSource = $MyInvocation.MyCommand.Name                                                  PS C:\Users\Administrator> If (-Not $EventSource)                                                                       >> {                                                                                                                    >>     $EventSource = "Powershell CLI"                                                                                  >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> If ([System.Diagnostics.EventLog]::Exists('Application') -eq $False -or [System.Diagnostics.EventLog]::SourceExists($EventSource) -eq $False)                                                                        >> {                                                                                                                    >>     New-EventLog -LogName Application -Source $EventSource                                                           >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Detect PowerShell version.                                                                 PS C:\Users\Administrator> If ($PSVersionTable.PSVersion.Major -lt 3)                                                   >> {                                                                                                                    >>     Write-Log "PowerShell version 3 or higher is required."                                                          >>     Throw "PowerShell version 3 or higher is required."                                                              >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Find and start the WinRM service.                                                          PS C:\Users\Administrator> Write-Verbose "Verifying WinRM service."                                                     PS C:\Users\Administrator> If (!(Get-Service "WinRM"))                                                                  >> {                                                                                                                    >>     Write-Log "Unable to find the WinRM service."                                                                    >>     Throw "Unable to find the WinRM service."                                                                        >> }                                                                                                                    PS C:\Users\Administrator> ElseIf ((Get-Service "WinRM").Status -ne "Running")                                          ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ((Get-Service "WinRM").Status -ne "Running")                                                                   + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Starting WinRM service."                                                                          >>     Start-Service -Name "WinRM" -ErrorAction Stop                                                                    >>     Write-Log "Started WinRM service."                                                                               >>     Write-Verbose "Setting WinRM service to start automatically on boot."                                            >>     Set-Service -Name "WinRM" -StartupType Automatic                                                                 >>     Write-Log "Set WinRM service to start automatically on boot."                                                    >>                                                                                                                      >> }                                                                                                                                                                                                                                                Write-Verbose "Starting WinRM service."                                                                                 Start-Service -Name "WinRM" -ErrorAction Stop                                                                           Write-Log "Started WinRM service."                                                                                      Write-Verbose "Setting WinRM service to start automatically on boot."                                                   Set-Service -Name "WinRM" -StartupType Automatic                                                                        Write-Log "Set WinRM service to start automatically on boot."                                                                                                                                                                                                                                                                                                       PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # WinRM should be running; check that we have a PS session config.                           PS C:\Users\Administrator> If (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\localhost\Listener)))                                                                                                                  >> {                                                                                                                    >>   If ($SkipNetworkProfileCheck) {                                                                                    >>     Write-Verbose "Enabling PS Remoting without checking Network profile."                                           >>     Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop                                              >>     Write-Log "Enabled PS Remoting without checking Network profile."                                                >>   }                                                                                                                  >>   Else {                                                                                                             >>     Write-Verbose "Enabling PS Remoting."                                                                            >>     Enable-PSRemoting -Force -ErrorAction Stop                                                                       >>     Write-Log "Enabled PS Remoting."                                                                                 >>   }                                                                                                                  >> }                                                                                                                    PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "PS Remoting is already enabled."                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "PS Remoting is already enabled."                                                                                                                                                                                             PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Make sure there is a SSL listener.                                                         PS C:\Users\Administrator> $listeners = Get-ChildItem WSMan:\localhost\Listener                                         PS C:\Users\Administrator> If (!($listeners | Where {$_.Keys -like "TRANSPORT=HTTPS"}))                                 >> {                                                                                                                    >>     # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                                  >>     $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                    >>     Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                                   >>                                                                                                                      >>     # Create the hashtables of settings to be used.                                                                  >>     $valueset = @{                                                                                                   >>         Hostname = $SubjectName                                                                                      >>         CertificateThumbprint = $thumbprint                                                                          >>     }                                                                                                                >>                                                                                                                      >>     $selectorset = @{                                                                                                >>         Transport = "HTTPS"                                                                                          >>         Address = "*"                                                                                                >>     }                                                                                                                >>                                                                                                                      >>     Write-Verbose "Enabling SSL listener."                                                                           >>     New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset             >>     Write-Log "Enabled SSL listener."                                                                                >> }                                                                                                                    Self-signed SSL certificate generated; thumbprint: 89D235C9A54A890972A42DFA6DFA71E01AC4042E                                                                                                                                                                                                                                                                             wxf                 : http://schemas.xmlsoap.org/ws/2004/09/transfer                                                    a                   : http://schemas.xmlsoap.org/ws/2004/08/addressing                                                  w                   : http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd                                                    lang                : en-US                                                                                             Address             : http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous                                   ReferenceParameters : ReferenceParameters                                                                                                                                                                                                                                                                                                                                                                                                                                                       PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "SSL listener is already active."                                                                  >>                                                                                                                      >>     # Force a new SSL cert on Listener if the $ForceNewSSLCert                                                       >>     If ($ForceNewSSLCert)                                                                                            >>     {                                                                                                                >>                                                                                                                      >>         # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                              >>         $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                >>         Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                               >>                                                                                                                      >>         $valueset = @{                                                                                               >>             CertificateThumbprint = $thumbprint                                                                      >>             Hostname = $SubjectName                                                                                  >>         }                                                                                                            >>                                                                                                                      >>         # Delete the listener for SSL                                                                                >>         $selectorset = @{                                                                                            >>             Address = "*"                                                                                            >>             Transport = "HTTPS"                                                                                      >>         }                                                                                                            >>         Remove-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset                          >>                                                                                                                      >>         # Add new Listener with new SSL cert                                                                         >>         New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset         >>     }                                                                                                                >> }                                                                                                                                                                                                                                                Write-Verbose "SSL listener is already active."                                                                                                                                                                                                 # Force a new SSL cert on Listener if the $ForceNewSSLCert                                                              If ($ForceNewSSLCert)                                                                                                   {                                                                                                                                                                                                                                                   # We cannot use New-SelfSignedCertificate on 2012R2 and earlier                                                         $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays                           Write-HostLog "Self-signed SSL certificate generated; thumbprint: $thumbprint"                                                                                                                                                                  $valueset = @{                                                                                                              CertificateThumbprint = $thumbprint                                                                                     Hostname = $SubjectName                                                                                             }                                                                                                                                                                                                                                               # Delete the listener for SSL                                                                                           $selectorset = @{                                                                                                           Address = "*"                                                                                                           Transport = "HTTPS"                                                                                                 }                                                                                                                       Remove-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset                                                                                                                                                             # Add new Listener with new SSL cert                                                                                    New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset                }                                                                                                                                                                                                                                           PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Check for basic authentication.                                                            PS C:\Users\Administrator> $basicAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where {$_.Name -eq "Basic"}                                                                                                                        PS C:\Users\Administrator> If (($basicAuthSetting.Value) -eq $false)                                                    >> {                                                                                                                    >>     Write-Verbose "Enabling basic auth support."                                                                     >>     Set-Item -Path "WSMan:\localhost\Service\Auth\Basic" -Value $true                                                >>     Write-Log "Enabled basic auth support."                                                                          >> }                                                                                                                    PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Basic auth is already enabled."                                                                   >> }                                                                                                                                                                                                                                                Write-Verbose "Basic auth is already enabled."                                                                                                                                                                                              PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # If EnableCredSSP if set to true                                                            PS C:\Users\Administrator> If ($EnableCredSSP)                                                                          >> {                                                                                                                    >>     # Check for CredSSP authentication                                                                               >>     $credsspAuthSetting = Get-ChildItem WSMan:\localhost\Service\Auth | Where {$_.Name -eq "CredSSP"}                >>     If (($credsspAuthSetting.Value) -eq $false)                                                                      >>     {                                                                                                                >>         Write-Verbose "Enabling CredSSP auth support."                                                               >>         Enable-WSManCredSSP -role server -Force                                                                      >>         Write-Log "Enabled CredSSP auth support."                                                                    >>     }                                                                                                                >> }                                                                                                                    PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Configure firewall to allow WinRM HTTPS connections.                                       PS C:\Users\Administrator> $fwtest1 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS"                     PS C:\Users\Administrator> $fwtest2 = netsh advfirewall firewall show rule name="Allow WinRM HTTPS" profile=any         PS C:\Users\Administrator> If ($fwtest1.count -lt 5)                                                                    >> {                                                                                                                    >>     Write-Verbose "Adding firewall rule to allow WinRM HTTPS."                                                       >>     netsh advfirewall firewall add rule profile=any name="Allow WinRM HTTPS" dir=in localport=5986 protocol=TCP action=allow                                                                                                                 >>     Write-Log "Added firewall rule to allow WinRM HTTPS."                                                            >> }                                                                                                                    PS C:\Users\Administrator> ElseIf (($fwtest1.count -ge 5) -and ($fwtest2.count -lt 5))                                  ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf (($fwtest1.count -ge 5) -and ($fwtest2.count -lt 5))                                                           + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Updating firewall rule to allow WinRM HTTPS for any profile."                                     >>     netsh advfirewall firewall set rule name="Allow WinRM HTTPS" new profile=any                                     >>     Write-Log "Updated firewall rule to allow WinRM HTTPS for any profile."                                          >> }                                                                                                                                                                                                                                                Write-Verbose "Updating firewall rule to allow WinRM HTTPS for any profile."                                            netsh advfirewall firewall set rule name="Allow WinRM HTTPS" new profile=any                                            Write-Log "Updated firewall rule to allow WinRM HTTPS for any profile."                                                                                                                                                                     PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "Firewall rule already exists to allow WinRM HTTPS."                                               >> }                                                                                                                                                                                                                                                Write-Verbose "Firewall rule already exists to allow WinRM HTTPS."                                                                                                                                                                          PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> # Test a remoting connection to localhost, which should work.                                PS C:\Users\Administrator> $httpResult = Invoke-Command -ComputerName "localhost" -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue                                                                       PS C:\Users\Administrator> $httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck           PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> $httpsResult = New-PSSession -UseSSL -ComputerName "localhost" -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue                                                                  PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator> If ($httpResult -and $httpsResult)                                                           >> {                                                                                                                    >>     Write-Verbose "HTTP: Enabled | HTTPS: Enabled"                                                                   >> }                                                                                                                    PS C:\Users\Administrator> ElseIf ($httpsResult -and !$httpResult)                                                      ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ($httpsResult -and !$httpResult)                                                                               + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "HTTP: Disabled | HTTPS: Enabled"                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "HTTP: Disabled | HTTPS: Enabled"                                                                                                                                                                                             PS C:\Users\Administrator> ElseIf ($httpResult -and !$httpsResult)                                                      ElseIf : The term 'ElseIf' is not recognized as the name of a cmdlet, function, script file, or operable program.       Check the spelling of the name, or if a path was included, verify that the path is correct and try again.               At line:1 char:1                                                                                                        + ElseIf ($httpResult -and !$httpsResult)                                                                               + ~~~~~~                                                                                                                    + CategoryInfo          : ObjectNotFound: (ElseIf:String) [], ParentContainsErrorRecordException                        + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Verbose "HTTP: Enabled | HTTPS: Disabled"                                                                  >> }                                                                                                                                                                                                                                                Write-Verbose "HTTP: Enabled | HTTPS: Disabled"                                                                                                                                                                                             PS C:\Users\Administrator> Else                                                                                         Else : The term 'Else' is not recognized as the name of a cmdlet, function, script file, or operable program. Check     the spelling of the name, or if a path was included, verify that the path is correct and try again.                     At line:1 char:1                                                                                                        + Else                                                                                                                  + ~~~~                                                                                                                      + CategoryInfo          : ObjectNotFound: (Else:String) [], ParentContainsErrorRecordException                          + FullyQualifiedErrorId : CommandNotFoundException                                                                                                                                                                                          PS C:\Users\Administrator> {                                                                                            >>     Write-Log "Unable to establish an HTTP or HTTPS remoting session."                                               >>     Throw "Unable to establish an HTTP or HTTPS remoting session."                                                   >> }                                                                                                                                                                                                                                                Write-Log "Unable to establish an HTTP or HTTPS remoting session."                                                      Throw "Unable to establish an HTTP or HTTPS remoting session."                                                                                                                                                                              PS C:\Users\Administrator> Write-VerboseLog "PS Remoting has been successfully configured for Ansible."                 PS C:\Users\Administrator> ElseIf ($httpResult -and !$httpsResult)^C                                                    PS C:\Users\Administrator> winrm enumerate winrm/config/Listener                                                        Listener                                                                                                                    Address = *                                                                                                             Transport = HTTP                                                                                                        Port = 5985                                                                                                             Hostname                                                                                                                Enabled = true                                                                                                          URLPrefix = wsman                                                                                                       CertificateThumbprint                                                                                                   ListeningOn = 127.0.0.1, 192.168.29.226, ::1, 2405:201:4020:da10:3c65:9906:f443:b7a3, 2405:201:4020:da10:6010:2a29:1763:7017, fe80::dccb:fbd1:97a5:5411%4                                                                                                                                                                                                           Listener                                                                                                                    Address = *                                                                                                             Transport = HTTPS                                                                                                       Port = 5986                                                                                                             Hostname = WINDOWS3                                                                                                     Enabled = true                                                                                                          URLPrefix = wsman                                                                                                       CertificateThumbprint = 89D235C9A54A890972A42DFA6DFA71E01AC4042E                                                        ListeningOn = 127.0.0.1, 192.168.29.226, ::1, 2405:201:4020:da10:3c65:9906:f443:b7a3, 2405:201:4020:da10:6010:2a29:1763:7017, fe80::dccb:fbd1:97a5:5411%4                                                                                                                                                                                                           PS C:\Users\Administrator> {                                                                                            >>     Write-Log "Unable to establish an HTTP or HTTPS remoting session."                                               >>     Throw "Unable to establish an HTTP or HTTPS remoting ses^C                                                       PS C:\Users\Administrator> winrm get winrm/config/Listener                                                              WSManFault                                                                                                                  Message                                                                                                                     ProviderFault                                                                                                               WSManFault                                                                                                                  Message = This resource requires the following selectors: Address Transport                                                                                                                                                     Error number:  -2144108454 0x8033805A                                                                                   The WS-Management service cannot process the request because the request did not contain all required selectors.        PS C:\Users\Administrator> winrm get winrm/config/service                                                               Service                                                                                                                     RootSDDL = O:NSG:BAD:P(A;;GA;;;BA)(A;;GR;;;IU)S:P(AU;FA;GA;;;WD)(AU;SA;GXGW;;;WD)                                       MaxConcurrentOperations = 4294967295                                                                                    MaxConcurrentOperationsPerUser = 1500                                                                                   EnumerationTimeoutms = 240000                                                                                           MaxConnections = 300                                                                                                    MaxPacketRetrievalTimeSeconds = 120                                                                                     AllowUnencrypted = false                                                                                                Auth                                                                                                                        Basic = true                                                                                                            Kerberos = true                                                                                                         Negotiate = true                                                                                                        Certificate = false                                                                                                     CredSSP = false                                                                                                         CbtHardeningLevel = Relaxed                                                                                         DefaultPorts                                                                                                                HTTP = 5985                                                                                                             HTTPS = 5986                                                                                                        IPv4Filter = *                                                                                                          IPv6Filter = *                                                                                                          EnableCompatibilityHttpListener = false                                                                                 EnableCompatibilityHttpsListener = false                                                                                CertificateThumbprint                                                                                                   AllowRemoteAccess = true                                                                                                                                                                                                                    PS C:\Users\Administrator> winrm get winrm/config/winrs                                                                 Winrs                                                                                                                       AllowRemoteShellAccess = true                                                                                           IdleTimeout = 7200000                                                                                                   MaxConcurrentUsers = 2147483647                                                                                         MaxShellRunTime = 2147483647                                                                                            MaxProcessesPerShell = 2147483647                                                                                       MaxMemoryPerShellMB = 2147483647                                                                                        MaxShellsPerUser = 2147483647                                                                                                                                                                                                               PS C:\Users\Administrator> ipconfig                                                                                                                                                                                                             Windows IP Configuration                                                                                                                                                                                                                                                                                                                                                Ethernet adapter Ethernet:                                                                                                                                                                                                                         Connection-specific DNS Suffix  . :                                                                                     IPv6 Address. . . . . . . . . . . : 2405:201:4020:da10:6010:2a29:1763:7017                                              Temporary IPv6 Address. . . . . . : 2405:201:4020:da10:3c65:9906:f443:b7a3                                              Link-local IPv6 Address . . . . . : fe80::dccb:fbd1:97a5:5411%4                                                         IPv4 Address. . . . . . . . . . . : 192.168.29.226                                                                      Subnet Mask . . . . . . . . . . . : 255.255.255.0                                                                       Default Gateway . . . . . . . . . : fe80::aa88:1fff:fe26:abac%4                                                                                             192.168.29.1                                                                     PS C:\Users\Administrator>                                                                                              PS C:\Users\Administrator>     
